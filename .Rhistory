?mtcars
lm(mpg ~ cyl)
lm(mpg ~ cyl, data = mtcars)
summary(lm(mpg ~ cyl, data = mtcars))
summary(lm(mpg ~ am, data = mtcars))
summary(lm(mpg ~ disp, data = mtcars))
summary(lm(mpg ~ gear, data = mtcars))
summary(lm(mpg ~ carb, data = mtcars))
summary(lm(mpg ~ vs, data = mtcars))
summary(lm(mpg ~ cyl + disp + hp, data = mtcars))
summary(lm(mpg ~ cyl + gear, data = mtcars))
summary(lm(mpg ~ cyl + gear + am, data = mtcars))
summary(lm(mpg ~ am, data = mtcars))
summary(lm(mpg ~ am, data = mtcars))
summary(lm(mpg ~ am, data = mtcars))
summary(lm(mpg ~ am + wt, data = mtcars))
summary(lm(mpg ~ am, data = mtcars))
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
pairs(mtcars, main = "Pair-wise Comparison of All Variables")
with(mtcars, plot(mpg, am))
with(mtcars, plot(am, mpg))
library(ggplot2)
str(mtcars)
ggplot(mtcars aes(am, mpg)) + geom_boxplot()
ggplot(mtcars, aes(am, mpg)) + geom_boxplot()
ggplot(mtcars, aes(factor(am), mpg)) + geom_boxplot()
ggplot(mtcars, aes(factor(am), mpg, color = factor(am))) + geom_boxplot()
ggplot(mtcars, aes(factor(am), mpg, color = factor(am))) + geom_boxplot() + xlab('Transmission Type') + ylab('Miles Per Gallon (MPG)') + ggtitle('Transmission Type vs. MPG')
ggplot(mtcars, aes(factor(am), mpg, color = factor(am))) +
geom_boxplot() +
xlab('Transmission Type') +
ylab('Miles Per Gallon (MPG)') +
ggtitle('Transmission Type vs. MPG') +
scale_x_discrete(breaks=c("0", "1"),
labels=c("Automatic", "Manual"))
ggplot(mtcars, aes(factor(am), mpg, color = factor(am))) +
geom_boxplot() +
xlab('Transmission Type') +
ylab('Miles Per Gallon (MPG)') +
ggtitle('Transmission Type vs. MPG') +
scale_x_discrete(breaks=c("0", "1"),
labels=c("Automatic", "Manual")) +
theme(legend.position="none")
ggplot(mtcars, aes(factor(am), mpg)) +
geom_boxplot() +
xlab('Transmission Type') +
ylab('Miles Per Gallon (MPG)') +
ggtitle('Transmission Type vs. MPG') +
scale_x_discrete(breaks=c("0", "1"),
labels=c("Automatic", "Manual")) +
theme(legend.position="none")
ggplot(mtcars, aes(factor(am), mpg)) +
geom_boxplot() +
xlab('Transmission Type') +
ylab('Miles Per Gallon (MPG)') +
ggtitle('Transmission Type vs. MPG') +
scale_x_discrete(breaks=c("0", "1"),
labels=c("Automatic", "Manual"))
ggplot(mtcars, aes(factor(am), mpg)) +
geom_boxplot() +
scale_x_discrete(breaks=c("0", "1"),
labels=c("Automatic", "Manual")) +
xlab('Transmission Type') +
ylab('Miles Per Gallon (MPG)') +
ggtitle('Transmission Type vs. MPG')
?geom_smooth
qplot(wt, mpg, data=mtcars, colour=factor(cyl))
model <- lm(mpg ~ wt + factor(cyl), data=mtcars)
grid <- with(mtcars, expand.grid(
wt = seq(min(wt), max(wt), length = 20),
cyl = levels(factor(cyl))
))
grid
grid$mpg <- stats::predict(model, newdata=grid)
qplot(wt, mpg, data=mtcars, colour=factor(cyl)) + geom_line(data=grid)
err <- stats::predict(model, newdata=grid, se = TRUE)
grid$ucl <- err$fit + 1.96 * err$se.fit
grid$lcl <- err$fit - 1.96 * err$se.fit
qplot(wt, mpg, data=mtcars, colour=factor(cyl)) +
geom_smooth(aes(ymin = lcl, ymax = ucl), data=grid, stat="identity")
summary(lm(mpg ~ factor(am), data = mtcars))
ggplot(data = mtcars, aes(x = factor(am), y = mpg)) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = mpg ~ factor(am)) +
geom_point()
summary(lm(mpg ~ factor(am) - 1, data = mtcars))
summary(lm(mpg ~ factor(am), data = mtcars))
rstandard(lm(formula = mpg ~ factor(am), data = mtcars))
plot(rstandard(lm(formula = mpg ~ factor(am), data = mtcars)))
plot(lm(formula = mpg ~ factor(am), data = metcars))
plot(lm(formula = mpg ~ factor(am), data = mtcars))
plot(lm(formula = mpg ~ factor(am) + wt, data = mtcars))
summary(lm(formula = mpg ~ factor(am) + wt, data = mtcars))
?mtcars
fit <- lm(mpg ~ factor(am))
fit <- lm(mpg ~ factor(am), data = mtcars)
fit
summary(fit)
summary(fit)$coff
summary(fit)
str(summary(fit))
summary(fit)$coefficients
lm(mpg ~ am, data = mtcars)
lm(mpg ~ factor(am), data = mtcars)
lm(mpg ~ factor(am) + cl, data = mtcars)
lm(mpg ~ factor(am) + cyl, data = mtcars)
summary(lm(mpg ~ factor(am) + cyl, data = mtcars))
summary(lm(mpg ~ factor(am) + cyl + hp, data = mtcars))
fit1 <- lm(mpg ~ factor(am), data = mtcars)
fit2 <- lm(mpg ~ factor(am) + cyl, data = mtcars)
fit3 <- lm(mpg ~ factor(am) + cyl + hp, data = mtcars)
anova(fit1, fit2, fit3)
pairs(mtcars, main = "Pair-wise Comparison of All Variables")
with(mtcars, plot(am, disp))
boxplot(disp ~ factor(am), data = mtcars)
boxplot(hp ~ factor(am), data = mtcars)
pairs(mtcars, main = "Pair-wise Comparison of All Variables")
lm(hp ~ disp, data = mtcars)
summary(lm(hp ~ disp, data = mtcars))
ggplot(mtcars, aes(x = disp, y = hp)) + geom_point() + geom_smooth(method = "lm", se=FALSE, color="black", formula = hp ~ disp)
ggplot(mtcars, aes(x = disp, y = hp)) + geom_smooth(method = "lm", se=FALSE, color="black", formula = hp ~ disp) + geom_point()
mtcars
fit <- lm(mpg ~ factor(am), data = mtcars)
summary(fit)
plot(am, mpg)
with(mtcars, plot(am, mpg))
ggplot(mtcars, aes(factor(am), mpg)) +
geom_boxplot() +
scale_x_discrete(breaks=c("0", "1"),
labels=c("Automatic", "Manual")) +
xlab('Transmission Type') +
ylab('Miles Per Gallon (MPG)') +
ggtitle('Transmission Type vs. MPG')
fit <- lm(mpg ~ factor(am), data = mtcars)
summary(fit)$coefficients
?theme
predict(fit)
plot(predict(fit), resid(fit))
plot(predict(fit), resid(fit), pch='.')
plot(predict(fit), resid(fit))
plot(fit)
plot(predict(fit), resid(fit))
plot(predict(fit), resid(fit))
abline(0)
plot(predict(fit), resid(fit))
plot(fit)
plot(predict(fit), resid(fit))
abline(0, 0)
vif(fit)
vif
?vif
install.packages("vif")
install.packages("VIF")
library(vif)
library(VIF)
vif(fit)
a <- plot(fit)
?mtcars
data(mtcars)
pairs(mtcars)
fit2 <- lm(mpg ~ wt + hp + disp + cyl + drat)
fit2 <- lm(mpg ~ wt + hp + disp + cyl + drat, data = mtcars)
summary(fit2)
fit2 <- lm(mpg ~ wt + hp*disp + cyl + drat, data = mtcars)
summary(fit2)
fit2 <- lm(mpg ~ wt + hp*disp + drat, data = mtcars)
summary(fit2)
fit2 <- lm(mpg ~ wt + hp*disp, data = mtcars)
summary(fit2)
fit2 <- lm(mpg ~ am + wt + hp*disp, data = mtcars)
summary(fit2)
summary(fit2)$coefficients
lm(mpg ~ am + wt + hp*disp*cyl, data = mtcars)
summary(lm(mpg ~ am + wt + hp*disp*cyl, data = mtcars))
summary(lm(mpg ~ am + wt + hp*disp, data = mtcars))
summary(lm(mpg ~ wt + hp*disp, data = mtcars))
summary(lm(mpg ~ wt + hp*disp*cyl, data = mtcars))
summary(lm(mpg ~ wt + hp*disp, data = mtcars))
r <- summary(lm(mpg ~ wt + hp*disp, data = mtcars))
r$r.squared
fit2 <- lm(mpg ~ wt + hp*disp, data = mtcars)
plot(fit2)
plot(fit2)
fit2 <- lm(mpg ~ wt + hp + cyl, data = mtcars)
plot(fit2)
fit2 <- lm(mpg ~ wt + am + hp + cyl, data = mtcars)
plot(fit2)
fit2 <- lm(mpg ~ wt + hp*disp, data = mtcars)
plot(fit2)
plot(lm(mpg ~ hp, data = mtcars))
plot(lm(mpg ~ disp, data = mtcars))
plot(lm(mpg ~ drat, data = mtcars))
summary(lm(mpg ~ drat, data = mtcars))
fit3 <- lm(mpg ~ wt + hp*disp + am, data = mtcars)
anova(fit2, fit3)
fit2 <- lm(mpg ~ wt + hp*disp, data = mtcars)
summary(fit2)
lm(mpg ~ factor(cyl) + wt)
lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(lm(mpg ~ factor(cyl) + wt, data = mtcars))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
lm(y ~ x)
hatvalues(lm(y ~ x))
fit1 <- lm(mpg~factor(cyl) + wt, data=mtcars)
fit2 <- update(fit1, mpg~factor(cyl) + wt + wt*factor(cyl))
summary(fit1)
summary(fit2)
influence.measures(fit)
library(MASS)
?MASS
?shuttle
str(shuttle)
model <- glm(use ~ wind, family="binomial")
model <- glm(use ~ wind, family="binomial", data = shuttle)
model
summary(model)
exp
summary(model)
exp(-0.25131 + -0.03181*1)/(1 + exp(-0.25131 + -0.03181*2))
shuttle2<-shuttle
shuttle2$use2<-as.numeric(shuttle2$use=='auto')
fit<-glm(use2 ~ factor(wind) - 1, family = binomial, data = shuttle2)
fit
coef(fit)
exp(coef(fit))
exp(coef(fit))[0]
exp(coef(fit))[1]
exp(coef(fit))[1] / exp(coef(fit))[2]
InsectSprays
fit <- glm(count ~ factor(spray), data = InsectSprays, family = "poisson")
fit
coef(fit)
exp(coef(fit))
exp(coef(fit))[1]/exp(coef(fit))[2]
fit <- glm(count ~ factor(spray) - 1, data = InsectSprays, family = "poisson")
fit
exp(coef(fit))
14.5/15.333333
?dnorm
install.packages('ISIR')
install.packages('ISLR')
library(ISLR)
library(ggplot)
library(ggplot2)
library(caret)
data(ISLR)
ISLR
data(Wage)
summary(Wage)
inTrain <- createDataPartition(Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
test <- Wage[-inTrain,]
featurePlot(x=trainin[c("age","education","jobclass")], y = training$wage, plot="pairs")
featurePlot(x=training[c("age","education","jobclass")], y = training$wage, plot="pairs")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
hist(training$Superplasticizer)
log(training$Superplasticizer) + 1
hist(training$Superplasticizer + 1)
log(training$Superplasticizer + 1)
log(training$Superplasticizer + 1)
hist(log(training$Superplasticizer + 1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training
preProcess(training, method = c("pca"))
View(training)
library(dplyr)
?select
select(training, starts_with("IL"))
training_il <- select(training, starts_with("IL"))
training_il
View(training_il)
preProcess(training_il, method = c("pca"))
preProcess(training_il, method = c("pca"), thresh = 0.9)
View(training)
training_il$diagnosis <- training$diagnosis
View(training_il)
param1 <- preProcess(x = training_il[-13], method = c("pca"), thresh = 0.8)
param1
str(param1)
View(testing)
train(method = "glm", x = training_il[-13], y = training_il$diagnosis, trControl = param1)
train(method = "glm", x = training_il[-13], y = factor(training_il$diagnosis), trControl = param1)
train(diagnosis ~., trControl = param1, data = training_il)
train(diagnosis ~., trControl = param1, data = training_il, method = "glm")
training_il
str(training_il)
training_il_pre <- predict(params1, training_il)
training_il_pre <- predict(param1, training_il)
training_il <- select(training, starts_with("IL"))
param1 <- preProcess(x = training_il, method = c("pca"), thresh = 0.8)
training_il_pre <- predict(param1, training_il)
training_il_pre
View(training_il_pre)
training_il_pre$diagnosis <- training$diagnosis
training_il_pre
train(diagnosis ~., data = training_il, method = "glm")
train(diagnosis ~., data = training_il_pre, method = "glm")
setwd("~/Projects/jawbone-prediction")
jawbone_training <- read.csv('data/pml-training.csv')
View(jawbone_training)
library(dplyr)
library(dpylr)
install.packages("dplyr")
install.packages('caret')
library(caret)
install.package(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
training <- jawbone_training %>% select(roll_belt, pitch_belt, yaw_belt, total_accel_belt, gyros_belt_x, gyros_belt_y, gyros_belt_z, accel_belt_x, accel_belt_y)
library(dplyr)
training <- jawbone_training %>% select(roll_belt, pitch_belt, yaw_belt, total_accel_belt, gyros_belt_x, gyros_belt_y, gyros_belt_z, accel_belt_x, accel_belt_y)
training <- jawbone_training %>% select(roll_belt, pitch_belt, yaw_belt, total_accel_belt, gyros_belt_x, gyros_belt_y, gyros_belt_z, accel_belt_x, accel_belt_y, accel_belt_z, magnet_belt_x, magnet_belt_y, magnet_belt_z, roll_arm)
training <- jawbone_training %>% select(roll_belt, pitch_belt, yaw_belt, total_accel_belt, gyros_belt_x, gyros_belt_y, gyros_belt_z, accel_belt_x, accel_belt_y, accel_belt_z, magnet_belt_x, magnet_belt_y, magnet_belt_z, roll_arm, pitch_arm, yaw_arm, total_accel_arm, gyros_arm_x, gyros_arm_y, gyros_arm_z, accel_arm_y, accel_arm_z, magnet_arm_x, magnet_arm_y, magnet_arm_z, roll_dumbbell, pitch_dumbbell, yaw_dumbbell)
training <- jawbone_training %>% select(roll_belt, pitch_belt, yaw_belt, total_accel_belt, gyros_belt_x, gyros_belt_y, gyros_belt_z, accel_belt_x, accel_belt_y, accel_belt_z, magnet_belt_x, magnet_belt_y, magnet_belt_z, roll_arm, pitch_arm, yaw_arm, total_accel_arm, gyros_arm_x, gyros_arm_y, gyros_arm_z, accel_arm_y, accel_arm_z, magnet_arm_x, magnet_arm_y, magnet_arm_z, roll_dumbbell, pitch_dumbbell, yaw_dumbbell)
training <- jawbone_training %>% select(roll_belt, pitch_belt, yaw_belt, total_accel_belt,
gyros_belt_x, gyros_belt_y, gyros_belt_z,
accel_belt_x, accel_belt_y, accel_belt_z,
magnet_belt_x, magnet_belt_y, magnet_belt_z,
roll_arm, pitch_arm, yaw_arm, total_accel_arm,
gyros_arm_x, gyros_arm_y, gyros_arm_z,
accel_arm_x, accel_arm_y, accel_arm_z,
magnet_arm_x, magnet_arm_y, magnet_arm_z,
roll_dumbbell, pitch_dumbbell, yaw_dumbbell)
training
View(training)
View(jawbone_training)
training
training <- jawbone_training %>% select(raw_timestamp_part_1, raw_timestamp_part_2, roll_belt, pitch_belt, yaw_belt, total_accel_belt,
gyros_belt_x, gyros_belt_y, gyros_belt_z,
accel_belt_x, accel_belt_y, accel_belt_z,
magnet_belt_x, magnet_belt_y, magnet_belt_z,
roll_arm, pitch_arm, yaw_arm, total_accel_arm,
gyros_arm_x, gyros_arm_y, gyros_arm_z,
accel_arm_x, accel_arm_y, accel_arm_z,
magnet_arm_x, magnet_arm_y, magnet_arm_z,
roll_dumbbell, pitch_dumbbell, yaw_dumbbell)
View(training)
training <- jawbone_training %>% select(raw_timestamp_part_1, raw_timestamp_part_2, roll_belt, pitch_belt, yaw_belt, total_accel_belt,
gyros_belt_x, gyros_belt_y, gyros_belt_z,
accel_belt_x, accel_belt_y, accel_belt_z,
magnet_belt_x, magnet_belt_y, magnet_belt_z,
roll_arm, pitch_arm, yaw_arm, total_accel_arm,
gyros_arm_x, gyros_arm_y, gyros_arm_z,
accel_arm_x, accel_arm_y, accel_arm_z,
magnet_arm_x, magnet_arm_y, magnet_arm_z,
roll_dumbbell, pitch_dumbbell, yaw_dumbbell, classe)
View(training)
training <- jawbone_training %>% select(raw_timestamp_part_1, raw_timestamp_part_2, roll_belt, pitch_belt, yaw_belt, total_accel_belt,
gyros_belt_x, gyros_belt_y, gyros_belt_z,
accel_belt_x, accel_belt_y, accel_belt_z,
magnet_belt_x, magnet_belt_y, magnet_belt_z,
roll_arm, pitch_arm, yaw_arm, total_accel_arm,
gyros_arm_x, gyros_arm_y, gyros_arm_z,
accel_arm_x, accel_arm_y, accel_arm_z,
magnet_arm_x, magnet_arm_y, magnet_arm_z,
roll_dumbbell, pitch_dumbbell, yaw_dumbbell, classe)
training <- jawbone_training %>% select(roll_belt, pitch_belt, yaw_belt, total_accel_belt,
gyros_belt_x, gyros_belt_y, gyros_belt_z,
accel_belt_x, accel_belt_y, accel_belt_z,
magnet_belt_x, magnet_belt_y, magnet_belt_z,
roll_arm, pitch_arm, yaw_arm, total_accel_arm,
gyros_arm_x, gyros_arm_y, gyros_arm_z,
accel_arm_x, accel_arm_y, accel_arm_z,
magnet_arm_x, magnet_arm_y, magnet_arm_z,
roll_dumbbell, pitch_dumbbell, yaw_dumbbell, classe)
library(caret)
?preProcess
train <- createDataPartition(training$classe, p = 0.6, list = FALSE)
train
trainIndex <- createDataPartition(training$classe, p = 0.6, list = FALSE)
train <- training[trainIndex,]
test <- training[-trainIndex,]
summary(train)
train
jawbone_training %>% filter(new_window == 'yes')
ss <- jawbone_training %>% filter(new_window == 'yes')
View(ss)
test_set <- train[c(3:31)]
test_set <- train[c(3:31),]
test_set
View(test_set)
test_set <- train[c(3:30),]
View(test_set)
test_set <- train[c(3:27),]
View(test_set)
View(train)
View(train)
str(train)
View(train[-30,])
View(train[,-30])
as.POSIXct(jawbone_training$raw_timestamp_part_1, origin="1970-01-01", tz="GMT")
x <- as.POSIXct(jawbone_training$raw_timestamp_part_1, origin="1970-01-01", tz="GMT")
View(x)
?trainControl
model <- train(classe ~., method = "rpart", data=train)
str(train)
model <- train(classe ~., method = "rpart", data=train)
install.packages('e1071')
model <- train(classe ~., method = "rpart", data=train)
print(model)
print(model$finalModel)
install.packages('rattle')
library(rattle)
fancyRpartPlot(model$finalModel)
install.packages('rpart.plot')
fancyRpartPlot(model$finalModel)
model <- train(classe ~., method = "rpart", metric = "ROC", data=train)
control <- trainControl(method="cv", number=10, classProbs = TRUE)
model <- train(classe ~., method = "rpart", trControl = control, metric = "ROC", data=train)
model$finalModel
print(model)
results <- predict(model, test)
results
confusionMatrix(results, test$classe)
confusionMatrix(data = results, test$classe)
model <- train(classe ~., method = "rf", trControl = control, data=train)
results <- predict(model, test)
results$finalModel
confusionMatrix(results, test$classe)
resultsMatrix <- confusionMatrix(results, test$classe)
resultsMatrix
resultsMatrix$byClass
resultsMatrix$table
library(tsne)
View(train)
reduced <- tsne(train[,-30], perplexity=50)
?tsne
reduced <- tsne(train[,-30])
principle_components <- princomp(train[,-30])$scores[,1:2]
principle_components
principle_components[,1]
library(ggplot2)
pc <- data.frame(principle_components)
pc
View(pc)
pc$Class <- train$classe
View(pc$Class)
View(pc)
pcaPro <- preProcess(train[-30], method = c("center", "scale", "pca"), pcaComp =  2)
pc <- predict(pcaPro, train)
pc <- predict(pcaPro, train[-30])
pc
str(pc)
pc$class <- train$classe
View(pc)
ggplot(pc, aes(x = PC1, y = PC2, color = class)) + geom_point()
pcaPro
model$finalModel
summary(model)
print(model$finalModel)
str(jawbone_training)
str(training)
summary(training)
ggplot(pc, aes(x = PC1, y = PC2, color = class)) + geom_point()
pcaTransform <- preProcess(train[-30],
method = c("center", "scale", "pca"),
pcaComp =  2)
pc <- predict(pcaTransform, train[-30])
pc$class <- train$classe
ggplot(pc, aes(x = PC1, y = PC2, color = class))
+ geom_point()
# Ignore the 'classe' variable
pcaTransform <- preProcess(train[-30],
method = c("center", "scale", "pca"),
pcaComp =  2)
pc <- predict(pcaTransform, train[-30])
pc$class <- train$classe
ggplot(pc, aes(x = PC1, y = PC2, color = class)) + geom_point()
model
resultsMatrix
print(model$finalModel)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
jawbone_test <- read.csv('data/pml-testing.csv')
predict(model, jawbone_test)
prediction_results <- predict(model, jawbone_test)
pml_write_files(prediction_results)
print(model$finalModel)
resultsMatrix
resultsMatrix$table
resultsMatrix$overall
resultsMatrix
