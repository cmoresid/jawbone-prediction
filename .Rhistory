inspect(acq[1:2])
install.packages("UsingR")
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
?I
(x - 1.077)^2
t((x - 1.077)^2)
(x - 1.077)^2
w %*% t((x - 1.077)^2)
w * t((x - 1.077)^2)
(x - 1.077)^2
matrix((x-1.077)^2)
w %*% matrix((x-1.077)^2)
w %*% matrix((x-0.1471)^2)
w %*% matrix((x-0.300)^2)
w %*% matrix((x-0.0025)^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
df <- data.frame(x = x, y = y)
df
lm(y ~ x)
library(ggplot2)
ggplot(df, aes(x, y)) + geom_point()
ggplot(df, aes(y, x)) + geom_point()
ggplot(df, aes(x, y)) + geom_point()
?lm
lm(y ~ x, df)
data(mtcars)
?glm
lm(mpg ~ weight, mtcars)
mtcars
lm(mpg ~ wt, mtcars)
lm(wt ~ mpg, mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x[0] - mean(x))/sd(x)
(x[1] - mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x,y)
df
lm(y ~ x)
lm(y ~ x, df)
lm(y ~ I(x - mean(x)), df)
abline(lm(y ~ x, df))
abline(lm(y ~ I(x - mean(x)), df))
abline(lm(I(y - mean(y)) ~ I(x - mean(x)), df))
plot(x,y)
abline(lm(I(y - mean(y)) ~ x, df))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x,y)
lm(y ~ x, df)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
x
yc <- y - mean(y)
xc <- x - mean(x)
beta1 <- sum(yc * xc) / sum(xc ^ 2)
c(beta1, coef(lm(y ~ x))[2])
c <- (1, 1, -1, -1)
x <- c(1, 1, -1, -1)
mean(x)
y <- c(-1, 1, -1, 1)
plot(x, y)
lm(y ~ x)
matrix(1:9, 3)
t(matrix(1:9, 3))
matrix(1:9, 3, byrow = TRUE)
t(matrix(1:9, 3, byrow = TRUE))
library(UsingR)
install.packages('UsingR')
library(UsingR)
data(dimond)
data(diamond)
diamond
data(diamond)
data(anscombe)
example(anscombe)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
summary(fit)
0.053 * 2
data(mtcars)
fit <- lm(mpg ~ weight, data = mtcars)
mtcars
fit <- lm(mpg ~ wt, data = mtcars)
fit
summary(fit)
?predict
predict(fit, newdata = data.frame(mpg = mean(x)), level = 0.95, interval = "confidence")
predict(fit, newdata = data.frame(mpg = mean(wt)), level = 0.95, interval = "confidence")
predict(fit, newdata = data.frame(wt = mean(mtcars$wt)), level = 0.95, interval = "confidence")
mean(mtcars$wt)
mtcars$wt
fit
summary(fit)
fit$coefficients
fit$coefficients[2]
fit$coefficients[2] + c(-1, 1) * qt(p = 1 - 0.95/2, df = length(mtcars$wt) - 2) * fit$residuals[1]
fit$coefficients[2] + c(-1, 1) * qt(p = 1 - 0.95/2, df = length(mtcars$wt) - 2) * 0.5591
length(mtcars$wt)
mtcars
fit$coefficients[2] + c(-1, 1) * qt(p = (1 - 0.95)/2, df = length(mtcars$wt) - 2) * 0.5591
fit$coefficents
fit$coefficients
fit$coefficients[1,1]
fit$coefficients[1]
fit$coefficients[2]
fit$coefficients[2] + c(-1, 1) * qt(0.975, df = fit$df) * 0.5591
?mtcars
predict(fit, newdata = data.frame(wt = mean(mtcars$wt)), level = 0.95, interval = "confidence")
predict(fit, newdata = data.frame(wt = mean(mtcars$wt)), level = 0.95, interval = "confidence", se.fit = T)
?predict.lm
predict(fit, newdata = data.frame(wt = 3000), level = 0.95, interval = "prediction")
fit
plot(fit)
plot(fit)
plot(fit)
absline(fit)
abline(fit)
predict(fit, newdata = data.frame(wt = 3), level = 0.95, interval = "prediction")
fit <- lm(mpg ~ 2*wt, data = mtcars)
fit <- lm(mpg ~ I(2*wt), data = mtcars)
fit
fit
fit <- lm(mpg ~ I(wt/2), data = mtcars)
fit
fit <- lm(mpg ~ I(wt*(1000/2000)), data = mtcars)
fit
fit <- lm(mpg ~ I(wt*(2)), data = mtcars)
fit
fit <- lm(mpg ~ I(wt/(2)), data = mtcars)
fit
fit <- lm(mpg ~ I(wt/2), data = mtcars)
fit
summary(fit)
fit$coefficients[1]
fit$coefficients[2]
fit$coefficients[2] + c(-1, 1) * qt(0.975, df = fit$df) * 1.118
data(mtcars)
View(mtcars)
?mtcars
lm(mpg ~ cyl)
lm(mpg ~ cyl, data = mtcars)
summary(lm(mpg ~ cyl, data = mtcars))
summary(lm(mpg ~ am, data = mtcars))
summary(lm(mpg ~ disp, data = mtcars))
summary(lm(mpg ~ gear, data = mtcars))
summary(lm(mpg ~ carb, data = mtcars))
summary(lm(mpg ~ vs, data = mtcars))
summary(lm(mpg ~ cyl + disp + hp, data = mtcars))
summary(lm(mpg ~ cyl + gear, data = mtcars))
summary(lm(mpg ~ cyl + gear + am, data = mtcars))
summary(lm(mpg ~ am, data = mtcars))
summary(lm(mpg ~ am, data = mtcars))
summary(lm(mpg ~ am, data = mtcars))
summary(lm(mpg ~ am + wt, data = mtcars))
summary(lm(mpg ~ am, data = mtcars))
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
pairs(mtcars, main = "Pair-wise Comparison of All Variables")
with(mtcars, plot(mpg, am))
with(mtcars, plot(am, mpg))
library(ggplot2)
str(mtcars)
ggplot(mtcars aes(am, mpg)) + geom_boxplot()
ggplot(mtcars, aes(am, mpg)) + geom_boxplot()
ggplot(mtcars, aes(factor(am), mpg)) + geom_boxplot()
ggplot(mtcars, aes(factor(am), mpg, color = factor(am))) + geom_boxplot()
ggplot(mtcars, aes(factor(am), mpg, color = factor(am))) + geom_boxplot() + xlab('Transmission Type') + ylab('Miles Per Gallon (MPG)') + ggtitle('Transmission Type vs. MPG')
ggplot(mtcars, aes(factor(am), mpg, color = factor(am))) +
geom_boxplot() +
xlab('Transmission Type') +
ylab('Miles Per Gallon (MPG)') +
ggtitle('Transmission Type vs. MPG') +
scale_x_discrete(breaks=c("0", "1"),
labels=c("Automatic", "Manual"))
ggplot(mtcars, aes(factor(am), mpg, color = factor(am))) +
geom_boxplot() +
xlab('Transmission Type') +
ylab('Miles Per Gallon (MPG)') +
ggtitle('Transmission Type vs. MPG') +
scale_x_discrete(breaks=c("0", "1"),
labels=c("Automatic", "Manual")) +
theme(legend.position="none")
ggplot(mtcars, aes(factor(am), mpg)) +
geom_boxplot() +
xlab('Transmission Type') +
ylab('Miles Per Gallon (MPG)') +
ggtitle('Transmission Type vs. MPG') +
scale_x_discrete(breaks=c("0", "1"),
labels=c("Automatic", "Manual")) +
theme(legend.position="none")
ggplot(mtcars, aes(factor(am), mpg)) +
geom_boxplot() +
xlab('Transmission Type') +
ylab('Miles Per Gallon (MPG)') +
ggtitle('Transmission Type vs. MPG') +
scale_x_discrete(breaks=c("0", "1"),
labels=c("Automatic", "Manual"))
ggplot(mtcars, aes(factor(am), mpg)) +
geom_boxplot() +
scale_x_discrete(breaks=c("0", "1"),
labels=c("Automatic", "Manual")) +
xlab('Transmission Type') +
ylab('Miles Per Gallon (MPG)') +
ggtitle('Transmission Type vs. MPG')
?geom_smooth
qplot(wt, mpg, data=mtcars, colour=factor(cyl))
model <- lm(mpg ~ wt + factor(cyl), data=mtcars)
grid <- with(mtcars, expand.grid(
wt = seq(min(wt), max(wt), length = 20),
cyl = levels(factor(cyl))
))
grid
grid$mpg <- stats::predict(model, newdata=grid)
qplot(wt, mpg, data=mtcars, colour=factor(cyl)) + geom_line(data=grid)
err <- stats::predict(model, newdata=grid, se = TRUE)
grid$ucl <- err$fit + 1.96 * err$se.fit
grid$lcl <- err$fit - 1.96 * err$se.fit
qplot(wt, mpg, data=mtcars, colour=factor(cyl)) +
geom_smooth(aes(ymin = lcl, ymax = ucl), data=grid, stat="identity")
summary(lm(mpg ~ factor(am), data = mtcars))
ggplot(data = mtcars, aes(x = factor(am), y = mpg)) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = mpg ~ factor(am)) +
geom_point()
summary(lm(mpg ~ factor(am) - 1, data = mtcars))
summary(lm(mpg ~ factor(am), data = mtcars))
rstandard(lm(formula = mpg ~ factor(am), data = mtcars))
plot(rstandard(lm(formula = mpg ~ factor(am), data = mtcars)))
plot(lm(formula = mpg ~ factor(am), data = metcars))
plot(lm(formula = mpg ~ factor(am), data = mtcars))
plot(lm(formula = mpg ~ factor(am) + wt, data = mtcars))
summary(lm(formula = mpg ~ factor(am) + wt, data = mtcars))
?mtcars
fit <- lm(mpg ~ factor(am))
fit <- lm(mpg ~ factor(am), data = mtcars)
fit
summary(fit)
summary(fit)$coff
summary(fit)
str(summary(fit))
summary(fit)$coefficients
lm(mpg ~ am, data = mtcars)
lm(mpg ~ factor(am), data = mtcars)
lm(mpg ~ factor(am) + cl, data = mtcars)
lm(mpg ~ factor(am) + cyl, data = mtcars)
summary(lm(mpg ~ factor(am) + cyl, data = mtcars))
summary(lm(mpg ~ factor(am) + cyl + hp, data = mtcars))
fit1 <- lm(mpg ~ factor(am), data = mtcars)
fit2 <- lm(mpg ~ factor(am) + cyl, data = mtcars)
fit3 <- lm(mpg ~ factor(am) + cyl + hp, data = mtcars)
anova(fit1, fit2, fit3)
pairs(mtcars, main = "Pair-wise Comparison of All Variables")
with(mtcars, plot(am, disp))
boxplot(disp ~ factor(am), data = mtcars)
boxplot(hp ~ factor(am), data = mtcars)
pairs(mtcars, main = "Pair-wise Comparison of All Variables")
lm(hp ~ disp, data = mtcars)
summary(lm(hp ~ disp, data = mtcars))
ggplot(mtcars, aes(x = disp, y = hp)) + geom_point() + geom_smooth(method = "lm", se=FALSE, color="black", formula = hp ~ disp)
ggplot(mtcars, aes(x = disp, y = hp)) + geom_smooth(method = "lm", se=FALSE, color="black", formula = hp ~ disp) + geom_point()
mtcars
fit <- lm(mpg ~ factor(am), data = mtcars)
summary(fit)
plot(am, mpg)
with(mtcars, plot(am, mpg))
ggplot(mtcars, aes(factor(am), mpg)) +
geom_boxplot() +
scale_x_discrete(breaks=c("0", "1"),
labels=c("Automatic", "Manual")) +
xlab('Transmission Type') +
ylab('Miles Per Gallon (MPG)') +
ggtitle('Transmission Type vs. MPG')
fit <- lm(mpg ~ factor(am), data = mtcars)
summary(fit)$coefficients
?theme
predict(fit)
plot(predict(fit), resid(fit))
plot(predict(fit), resid(fit), pch='.')
plot(predict(fit), resid(fit))
plot(fit)
plot(predict(fit), resid(fit))
plot(predict(fit), resid(fit))
abline(0)
plot(predict(fit), resid(fit))
plot(fit)
plot(predict(fit), resid(fit))
abline(0, 0)
vif(fit)
vif
?vif
install.packages("vif")
install.packages("VIF")
library(vif)
library(VIF)
vif(fit)
a <- plot(fit)
?mtcars
data(mtcars)
pairs(mtcars)
fit2 <- lm(mpg ~ wt + hp + disp + cyl + drat)
fit2 <- lm(mpg ~ wt + hp + disp + cyl + drat, data = mtcars)
summary(fit2)
fit2 <- lm(mpg ~ wt + hp*disp + cyl + drat, data = mtcars)
summary(fit2)
fit2 <- lm(mpg ~ wt + hp*disp + drat, data = mtcars)
summary(fit2)
fit2 <- lm(mpg ~ wt + hp*disp, data = mtcars)
summary(fit2)
fit2 <- lm(mpg ~ am + wt + hp*disp, data = mtcars)
summary(fit2)
summary(fit2)$coefficients
lm(mpg ~ am + wt + hp*disp*cyl, data = mtcars)
summary(lm(mpg ~ am + wt + hp*disp*cyl, data = mtcars))
summary(lm(mpg ~ am + wt + hp*disp, data = mtcars))
summary(lm(mpg ~ wt + hp*disp, data = mtcars))
summary(lm(mpg ~ wt + hp*disp*cyl, data = mtcars))
summary(lm(mpg ~ wt + hp*disp, data = mtcars))
r <- summary(lm(mpg ~ wt + hp*disp, data = mtcars))
r$r.squared
fit2 <- lm(mpg ~ wt + hp*disp, data = mtcars)
plot(fit2)
plot(fit2)
fit2 <- lm(mpg ~ wt + hp + cyl, data = mtcars)
plot(fit2)
fit2 <- lm(mpg ~ wt + am + hp + cyl, data = mtcars)
plot(fit2)
fit2 <- lm(mpg ~ wt + hp*disp, data = mtcars)
plot(fit2)
plot(lm(mpg ~ hp, data = mtcars))
plot(lm(mpg ~ disp, data = mtcars))
plot(lm(mpg ~ drat, data = mtcars))
summary(lm(mpg ~ drat, data = mtcars))
fit3 <- lm(mpg ~ wt + hp*disp + am, data = mtcars)
anova(fit2, fit3)
fit2 <- lm(mpg ~ wt + hp*disp, data = mtcars)
summary(fit2)
lm(mpg ~ factor(cyl) + wt)
lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(lm(mpg ~ factor(cyl) + wt, data = mtcars))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
lm(y ~ x)
hatvalues(lm(y ~ x))
fit1 <- lm(mpg~factor(cyl) + wt, data=mtcars)
fit2 <- update(fit1, mpg~factor(cyl) + wt + wt*factor(cyl))
summary(fit1)
summary(fit2)
influence.measures(fit)
library(MASS)
?MASS
?shuttle
str(shuttle)
model <- glm(use ~ wind, family="binomial")
model <- glm(use ~ wind, family="binomial", data = shuttle)
model
summary(model)
exp
summary(model)
exp(-0.25131 + -0.03181*1)/(1 + exp(-0.25131 + -0.03181*2))
shuttle2<-shuttle
shuttle2$use2<-as.numeric(shuttle2$use=='auto')
fit<-glm(use2 ~ factor(wind) - 1, family = binomial, data = shuttle2)
fit
coef(fit)
exp(coef(fit))
exp(coef(fit))[0]
exp(coef(fit))[1]
exp(coef(fit))[1] / exp(coef(fit))[2]
InsectSprays
fit <- glm(count ~ factor(spray), data = InsectSprays, family = "poisson")
fit
coef(fit)
exp(coef(fit))
exp(coef(fit))[1]/exp(coef(fit))[2]
fit <- glm(count ~ factor(spray) - 1, data = InsectSprays, family = "poisson")
fit
exp(coef(fit))
14.5/15.333333
?dnorm
install.packages('ISIR')
install.packages('ISLR')
library(ISLR)
library(ggplot)
library(ggplot2)
library(caret)
data(ISLR)
ISLR
data(Wage)
summary(Wage)
inTrain <- createDataPartition(Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
test <- Wage[-inTrain,]
featurePlot(x=trainin[c("age","education","jobclass")], y = training$wage, plot="pairs")
featurePlot(x=training[c("age","education","jobclass")], y = training$wage, plot="pairs")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
hist(training$Superplasticizer)
log(training$Superplasticizer) + 1
hist(training$Superplasticizer + 1)
log(training$Superplasticizer + 1)
log(training$Superplasticizer + 1)
hist(log(training$Superplasticizer + 1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training
preProcess(training, method = c("pca"))
View(training)
library(dplyr)
?select
select(training, starts_with("IL"))
training_il <- select(training, starts_with("IL"))
training_il
View(training_il)
preProcess(training_il, method = c("pca"))
preProcess(training_il, method = c("pca"), thresh = 0.9)
View(training)
training_il$diagnosis <- training$diagnosis
View(training_il)
param1 <- preProcess(x = training_il[-13], method = c("pca"), thresh = 0.8)
param1
str(param1)
View(testing)
train(method = "glm", x = training_il[-13], y = training_il$diagnosis, trControl = param1)
train(method = "glm", x = training_il[-13], y = factor(training_il$diagnosis), trControl = param1)
train(diagnosis ~., trControl = param1, data = training_il)
train(diagnosis ~., trControl = param1, data = training_il, method = "glm")
training_il
str(training_il)
training_il_pre <- predict(params1, training_il)
training_il_pre <- predict(param1, training_il)
training_il <- select(training, starts_with("IL"))
param1 <- preProcess(x = training_il, method = c("pca"), thresh = 0.8)
training_il_pre <- predict(param1, training_il)
training_il_pre
View(training_il_pre)
training_il_pre$diagnosis <- training$diagnosis
training_il_pre
train(diagnosis ~., data = training_il, method = "glm")
train(diagnosis ~., data = training_il_pre, method = "glm")
install.packages("tsne")
setwd("~/Projects/jawbone-prediction")
jawbone <- read.csv('data/pml-training.csv')
View(jawbone)
training <- jawbone_training %>% select(roll_belt, pitch_belt, yaw_belt, total_accel_belt,
gyros_belt_x, gyros_belt_y, gyros_belt_z,
accel_belt_x, accel_belt_y, accel_belt_z,
magnet_belt_x, magnet_belt_y, magnet_belt_z,
roll_arm, pitch_arm, yaw_arm, total_accel_arm,
gyros_arm_x, gyros_arm_y, gyros_arm_z,
accel_arm_x, accel_arm_y, accel_arm_z,
magnet_arm_x, magnet_arm_y, magnet_arm_z,
roll_dumbbell, pitch_dumbbell, yaw_dumbbell,
classe)
library(dplyr)
training <- jawbone_training %>% select(roll_belt, pitch_belt, yaw_belt, total_accel_belt,
gyros_belt_x, gyros_belt_y, gyros_belt_z,
accel_belt_x, accel_belt_y, accel_belt_z,
magnet_belt_x, magnet_belt_y, magnet_belt_z,
roll_arm, pitch_arm, yaw_arm, total_accel_arm,
gyros_arm_x, gyros_arm_y, gyros_arm_z,
accel_arm_x, accel_arm_y, accel_arm_z,
magnet_arm_x, magnet_arm_y, magnet_arm_z,
roll_dumbbell, pitch_dumbbell, yaw_dumbbell,
classe)
training <- jawbone %>% select(roll_belt, pitch_belt, yaw_belt, total_accel_belt,
gyros_belt_x, gyros_belt_y, gyros_belt_z,
accel_belt_x, accel_belt_y, accel_belt_z,
magnet_belt_x, magnet_belt_y, magnet_belt_z,
roll_arm, pitch_arm, yaw_arm, total_accel_arm,
gyros_arm_x, gyros_arm_y, gyros_arm_z,
accel_arm_x, accel_arm_y, accel_arm_z,
magnet_arm_x, magnet_arm_y, magnet_arm_z,
roll_dumbbell, pitch_dumbbell, yaw_dumbbell,
classe)
data(iris)
colors = rainbow(length(unique(iris$Species)))
names(colors) = unique(iris$Species)
ecb = function(x,y){ plot(x,t='n'); text(x,labels=iris$Species, col=colors[iris$Species]) }
tsne_iris = tsne(iris[,1:4], epoch_callback = ecb, perplexity=50)
library(tnse)
install.packages("tsne")
library(tnse)
library(tsne)
colors = rainbow(length(unique(iris$Species)))
names(colors) = unique(iris$Species)
ecb = function(x,y){ plot(x,t='n'); text(x,labels=iris$Species, col=colors[iris$Species]) }
tsne_iris = tsne(iris[,1:4], epoch_callback = ecb, perplexity=50)
tsne_iris
